apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-api
  namespace: modulo
  labels:
    app: spring-boot-api
    cost-center: "engineering"
    environment: "production"
    service: "backend"
    project: "modulo"
    team: "backend"
spec:
  replicas: 2 # Increased for better availability
  selector:
    matchLabels:
      app: spring-boot-api
  template:
    metadata:
      labels:
        app: spring-boot-api
        cost-center: "engineering"
        environment: "production"
        service: "backend"
        project: "modulo"
        team: "backend"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
      - name: api-container
        image: ghcr.io/ikey168/modulo/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: DATABASE_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: DATABASE_USERNAME
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: DATABASE_PASSWORD
        # Kubernetes-specific OpenTelemetry attributes
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_DEPLOYMENT_NAME
          value: "spring-boot-api"
        - name: K8S_CONTAINER_NAME
          value: "api-container"
        envFrom:
        - configMapRef:
            name: api-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/actuator/health/liveness
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/actuator/health/readiness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12  # Allow up to 2 minutes for startup
