apiVersion: litmuschaos.io/v1alpha1
kind: ChaosExperiment
metadata:
  name: node-drain
  namespace: modulo-chaos
  labels:
    name: node-drain
    app.kubernetes.io/part-of: litmus
    app.kubernetes.io/component: chaosexperiment
    app.kubernetes.io/version: 3.8.0
spec:
  definition:
    scope: Cluster
    permissions:
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["create","delete","get","list","patch","update", "deletecollection"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create","get","list","patch","update"]
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get","list"]
      - apiGroups: [""]
        resources: ["pods/log"]
        verbs: ["get","list","watch"]
      - apiGroups: [""]
        resources: ["pods/exec"]
        verbs: ["get","list","create"]
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["patch","get","list","update"]
      - apiGroups: ["apps"]
        resources: ["deployments","statefulsets","replicasets","daemonsets"]
        verbs: ["list","get"]
      - apiGroups: [""]
        resources: ["replicationcontrollers"]
        verbs: ["get","list"]
      - apiGroups: ["argoproj.io"]
        resources: ["rollouts"]
        verbs: ["list","get"]
      - apiGroups: ["batch"]
        resources: ["jobs"]
        verbs: ["create","list","get","delete","deletecollection"]
      - apiGroups: ["litmuschaos.io"]
        resources: ["chaosengines","chaosexperiments","chaosresults"]
        verbs: ["create","list","get","patch","update","delete"]
    image: "litmuschaos/go-runner:3.8.0"
    imagePullPolicy: Always
    args:
    - -c
    - ./experiments -name node-drain
    command:
    - /bin/bash
    env:
    - name: TOTAL_CHAOS_DURATION
      value: '60'
    - name: RAMP_TIME
      value: ''
    - name: TARGET_NODE
      value: ''
    - name: NODE_LABEL
      value: ''
    labels:
      name: node-drain
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/component: experiment-job
      app.kubernetes.io/version: 3.8.0
---
apiVersion: litmuschaos.io/v1alpha1
kind: ChaosEngine
metadata:
  name: node-drain-experiment
  namespace: modulo-chaos
  labels:
    experiment: node-drain
    app.kubernetes.io/name: modulo-chaos
    app.kubernetes.io/component: node-chaos
spec:
  engineState: 'active'
  auxiliaryAppInfo: ''
  chaosServiceAccount: modulo-chaos-sa
  experiments:
  - name: node-drain
    spec:
      components:
        env:
        # Duration for which node remains drained
        - name: TOTAL_CHAOS_DURATION
          value: '60'
        # Time period to wait before and after injection of chaos in sec
        - name: RAMP_TIME
          value: '10'
        # Node label selector for targeting specific nodes
        - name: NODE_LABEL
          value: 'kubernetes.io/os=linux'
      probe:
      - name: "check-pod-rescheduling"
        type: "k8sProbe"
        mode: "Continuous"
        runProperties:
          probeTimeout: 30
          retry: 5
          interval: 10
          probePollingInterval: 2
        k8sProbe/inputs:
          group: ""
          version: "v1"
          resource: "pods"
          namespace: "modulo"
          fieldSelector: "status.phase=Running"
          labelSelector: "app in (modulo-backend,modulo-frontend,postgres)"
          operation: "present"
      - name: "check-backend-availability"
        type: "httpProbe"
        mode: "Continuous"
        runProperties:
          probeTimeout: 30
          retry: 3
          interval: 15
          probePollingInterval: 5
        httpProbe/inputs:
          url: "http://modulo-backend-service.modulo.svc.cluster.local:8080/api/actuator/health"
          insecureSkipTLS: false
          responseTimeout: 20
          method:
            get:
              criteria: "=="
              responseCode: "200"
      - name: "check-frontend-availability"
        type: "httpProbe"
        mode: "Continuous"
        runProperties:
          probeTimeout: 30
          retry: 3
          interval: 15
          probePollingInterval: 5
        httpProbe/inputs:
          url: "http://modulo-frontend-service.modulo.svc.cluster.local:80/"
          insecureSkipTLS: false
          responseTimeout: 20
          method:
            get:
              criteria: "=="
              responseCode: "200"
      - name: "verify-cluster-stability"
        type: "cmdProbe"
        mode: "EOT"
        runProperties:
          probeTimeout: 20
          retry: 3
          interval: 5
        cmdProbe/inputs:
          command: "kubectl"
          args: ["get", "nodes", "--no-headers", "-o", "custom-columns=STATUS:.status.conditions[-1].type", "|", "grep", "-c", "Ready"]
          source:
            image: "bitnami/kubectl:latest"
            inheritInputs: true
          comparator:
            type: "int"
            criteria: ">="
            value: "1"
  annotationCheck: 'true'
  jobCleanUpPolicy: 'retain'
