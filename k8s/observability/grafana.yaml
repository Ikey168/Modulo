apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: observability
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true

    [log]
    mode = console

    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    root_url = http://localhost:3000

    [security]
    admin_user = admin
    admin_password = admin

  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true

      - name: Tempo
        type: tempo
        access: proxy
        url: http://tempo:3200
        editable: true
        jsonData:
          tracesToLogs:
            datasourceUid: 'loki'
            tags: ['job', 'instance', 'pod', 'namespace']
            mappedTags: [{ key: 'service.name', value: 'service' }]
            mapTagNamesEnabled: false
            spanStartTimeShift: '1h'
            spanEndTimeShift: '1h'
            filterByTraceID: false
            filterBySpanID: false
          tracesToMetrics:
            datasourceUid: 'prometheus'
            tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
            queries:
              - name: 'Sample query'
                query: 'sum(rate(tempo_spanmetrics_latency_bucket[$__rate_interval]))'
          serviceMap:
            datasourceUid: 'prometheus'
          search:
            hide: false
          nodeGraph:
            enabled: true

      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        editable: true
        jsonData:
          derivedFields:
            - datasourceUid: tempo
              matcherRegex: "trace_id=(\\w+)"
              name: TraceID
              url: '$${__value.raw}'

  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

  modulo-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Modulo Overview",
        "tags": ["modulo"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(http_server_requests_seconds_count{application=\"modulo-backend\"}[5m]))",
                "legendFormat": "Requests/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Error Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(modulo_api_errors_total[5m]))",
                "legendFormat": "Errors/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Response Time (95th percentile)",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_server_requests_seconds_bucket{application=\"modulo-backend\"}[5m])) by (le))",
                "legendFormat": "95th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "Active Users",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(modulo_websocket_connections_total)",
                "legendFormat": "Active connections"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          },
          {
            "id": 5,
            "title": "HTTP Request Duration",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, sum(rate(http_server_requests_seconds_bucket{application=\"modulo-backend\"}[5m])) by (le))",
                "legendFormat": "50th percentile"
              },
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_server_requests_seconds_bucket{application=\"modulo-backend\"}[5m])) by (le))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.99, sum(rate(http_server_requests_seconds_bucket{application=\"modulo-backend\"}[5m])) by (le))",
                "legendFormat": "99th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 6,
            "title": "Notes Operations",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(modulo_notes_created_total[5m])",
                "legendFormat": "Created"
              },
              {
                "expr": "rate(modulo_notes_updated_total[5m])",
                "legendFormat": "Updated"
              },
              {
                "expr": "rate(modulo_notes_deleted_total[5m])",
                "legendFormat": "Deleted"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s"
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-credentials
  namespace: observability
type: Opaque
data:
  admin-user: YWRtaW4=     # admin
  admin-password: YWRtaW4= # admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.5
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: admin-password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
        volumeMounts:
        - name: config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: dashboards-app
          mountPath: /var/lib/grafana/dashboards/app
        - name: dashboards-jvm
          mountPath: /var/lib/grafana/dashboards/jvm
        - name: dashboards-db
          mountPath: /var/lib/grafana/dashboards/db
        - name: dashboards-sync
          mountPath: /var/lib/grafana/dashboards/sync
        - name: dashboards-slo
          mountPath: /var/lib/grafana/dashboards/slo
        - name: storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 500m
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: grafana-config
          items:
          - key: grafana.ini
            path: grafana.ini
      - name: datasources
        configMap:
          name: grafana-config
          items:
          - key: datasources.yaml
            path: datasources.yaml
      - name: dashboards-config
        configMap:
          name: grafana-config
          items:
          - key: dashboards.yaml
            path: dashboards.yaml
      - name: dashboards
        configMap:
          name: grafana-config
          items:
          - key: modulo-overview.json
            path: modulo-overview.json
      - name: dashboards-app
        configMap:
          name: grafana-dashboards-app
          items:
          - key: app-performance.json
            path: app-performance.json
      - name: dashboards-jvm
        configMap:
          name: grafana-dashboards-jvm
          items:
          - key: jvm-performance.json
            path: jvm-performance.json
      - name: dashboards-db
        configMap:
          name: grafana-dashboards-db
          items:
          - key: database-performance.json
            path: database-performance.json
      - name: dashboards-sync
        configMap:
          name: grafana-dashboards-sync
          items:
          - key: sync-blockchain.json
            path: sync-blockchain.json
      - name: dashboards-slo
        configMap:
          name: grafana-dashboards-slo
          items:
          - key: slo-overview.json
            path: slo-overview.json
      - name: storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: observability
  labels:
    app: grafana
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: grafana
