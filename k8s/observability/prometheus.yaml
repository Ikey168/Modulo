apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: observability
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'modulo-cluster'
        replica: 'prometheus-0'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'otel-collector'
        static_configs:
          - targets: ['otel-collector:8888', 'otel-collector:8889']

      - job_name: 'tempo'
        static_configs:
          - targets: ['tempo:3200']

      - job_name: 'loki'
        static_configs:
          - targets: ['loki:3100']

      - job_name: 'grafana'
        static_configs:
          - targets: ['grafana:3000']

      # Kubernetes service discovery for applications
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - modulo
                - observability
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: service
            namespaces:
              names:
                - modulo
                - observability
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_service_name

  alerts.yml: |
    groups:
    - name: modulo.golden-signals
      interval: 30s
      rules:
      # ðŸ”¥ GOLDEN SIGNAL: ERROR RATE
      - alert: HighErrorRate
        expr: |
          (
            sum(rate(http_server_requests_seconds_count{application="modulo-backend", status=~"[4-5].*"}[5m])) / 
            sum(rate(http_server_requests_seconds_count{application="modulo-backend"}[5m]))
          ) * 100 > 5
        for: 2m
        labels:
          severity: critical
          golden_signal: error_rate
        annotations:
          summary: "High HTTP error rate detected"
          description: "Error rate is {{ $value }}% (threshold: 5%)"
          runbook_url: "https://runbooks.modulo.io/high-error-rate"

      - alert: ModerateErrorRate
        expr: |
          (
            sum(rate(http_server_requests_seconds_count{application="modulo-backend", status=~"[4-5].*"}[5m])) / 
            sum(rate(http_server_requests_seconds_count{application="modulo-backend"}[5m]))
          ) * 100 > 1
        for: 5m
        labels:
          severity: warning
          golden_signal: error_rate
        annotations:
          summary: "Moderate HTTP error rate detected"
          description: "Error rate is {{ $value }}% (threshold: 1%)"
          runbook_url: "https://runbooks.modulo.io/moderate-error-rate"

      # ðŸ”¥ GOLDEN SIGNAL: LATENCY (P95)
      - alert: HighLatencyP95
        expr: |
          histogram_quantile(0.95, 
            sum(rate(http_server_requests_seconds_bucket{application="modulo-backend"}[5m])) by (le)
          ) * 1000 > 1000
        for: 5m
        labels:
          severity: critical
          golden_signal: latency
        annotations:
          summary: "High P95 latency detected"
          description: "95th percentile latency is {{ $value }}ms (threshold: 1000ms)"
          runbook_url: "https://runbooks.modulo.io/high-latency"

      - alert: ModerateLatencyP95
        expr: |
          histogram_quantile(0.95, 
            sum(rate(http_server_requests_seconds_bucket{application="modulo-backend"}[5m])) by (le)
          ) * 1000 > 500
        for: 5m
        labels:
          severity: warning
          golden_signal: latency
        annotations:
          summary: "Moderate P95 latency detected"
          description: "95th percentile latency is {{ $value }}ms (threshold: 500ms)"
          runbook_url: "https://runbooks.modulo.io/moderate-latency"

      # ðŸ”¥ GOLDEN SIGNAL: TRAFFIC (Request Rate)
      - alert: LowTraffic
        expr: |
          sum(rate(http_server_requests_seconds_count{application="modulo-backend"}[5m])) < 0.1
        for: 10m
        labels:
          severity: warning
          golden_signal: traffic
        annotations:
          summary: "Low traffic detected"
          description: "Request rate is {{ $value }} req/sec (threshold: 0.1)"
          runbook_url: "https://runbooks.modulo.io/low-traffic"

      - alert: HighTraffic
        expr: |
          sum(rate(http_server_requests_seconds_count{application="modulo-backend"}[5m])) > 100
        for: 5m
        labels:
          severity: warning
          golden_signal: traffic
        annotations:
          summary: "High traffic detected"
          description: "Request rate is {{ $value }} req/sec (threshold: 100)"
          runbook_url: "https://runbooks.modulo.io/high-traffic"

      # ðŸ”¥ GOLDEN SIGNAL: SATURATION
      - alert: HighCPUSaturation
        expr: |
          avg(rate(container_cpu_usage_seconds_total{namespace="modulo", container="backend"}[5m])) * 100 > 85
        for: 5m
        labels:
          severity: critical
          golden_signal: saturation
        annotations:
          summary: "High CPU saturation detected"
          description: "CPU usage is {{ $value }}% (threshold: 85%)"
          runbook_url: "https://runbooks.modulo.io/high-cpu"

      - alert: HighMemorySaturation
        expr: |
          (
            avg(container_memory_usage_bytes{namespace="modulo", container="backend"}) / 
            avg(container_spec_memory_limit_bytes{namespace="modulo", container="backend"})
          ) * 100 > 85
        for: 5m
        labels:
          severity: critical
          golden_signal: saturation
        annotations:
          summary: "High memory saturation detected"
          description: "Memory usage is {{ $value }}% (threshold: 85%)"
          runbook_url: "https://runbooks.modulo.io/high-memory"

      - alert: HighJVMHeapUsage
        expr: |
          (
            jvm_memory_used_bytes{application="modulo-backend", area="heap"} / 
            jvm_memory_max_bytes{application="modulo-backend", area="heap"}
          ) * 100 > 85
        for: 5m
        labels:
          severity: warning
          golden_signal: saturation
        annotations:
          summary: "High JVM heap usage detected"
          description: "JVM heap usage is {{ $value }}% (threshold: 85%)"
          runbook_url: "https://runbooks.modulo.io/high-jvm-heap"

    - name: modulo.database
      interval: 30s
      rules:
      # Database Connection Pool Saturation
      - alert: DatabaseConnectionPoolHigh
        expr: |
          (
            hikaricp_connections_active{application="modulo-backend"} / 
            hikaricp_connections_max{application="modulo-backend"}
          ) * 100 > 80
        for: 5m
        labels:
          severity: warning
          component: database
        annotations:
          summary: "Database connection pool usage high"
          description: "Connection pool usage is {{ $value }}% (threshold: 80%)"
          runbook_url: "https://runbooks.modulo.io/db-connections"

      - alert: DatabaseConnectionPoolCritical
        expr: |
          (
            hikaricp_connections_active{application="modulo-backend"} / 
            hikaricp_connections_max{application="modulo-backend"}
          ) * 100 > 90
        for: 2m
        labels:
          severity: critical
          component: database
        annotations:
          summary: "Database connection pool usage critical"
          description: "Connection pool usage is {{ $value }}% (threshold: 90%)"
          runbook_url: "https://runbooks.modulo.io/db-connections-critical"

      # Database Query Performance
      - alert: SlowDatabaseQueries
        expr: |
          histogram_quantile(0.95, 
            sum(rate(modulo_database_query_duration_seconds_bucket[5m])) by (le)
          ) * 1000 > 1000
        for: 5m
        labels:
          severity: warning
          component: database
        annotations:
          summary: "Slow database queries detected"
          description: "95th percentile query time is {{ $value }}ms (threshold: 1000ms)"
          runbook_url: "https://runbooks.modulo.io/slow-queries"

    - name: modulo.business
      interval: 30s
      rules:
      # Business Logic Alerts
      - alert: WebSocketConnectionsHigh
        expr: |
          sum(modulo_websocket_connections_total) > 1000
        for: 5m
        labels:
          severity: warning
          component: websocket
        annotations:
          summary: "High number of WebSocket connections"
          description: "{{ $value }} WebSocket connections active (threshold: 1000)"
          runbook_url: "https://runbooks.modulo.io/websocket-connections"

      - alert: BlockchainOperationFailures
        expr: |
          rate(modulo_blockchain_transactions_total{status="failed"}[5m]) > 0.1
        for: 2m
        labels:
          severity: critical
          component: blockchain
        annotations:
          summary: "High blockchain operation failure rate"
          description: "{{ $value }} blockchain operations failing per second"
          runbook_url: "https://runbooks.modulo.io/blockchain-failures"

      - alert: SyncOperationBacklog
        expr: |
          modulo_sync_operations_pending > 100
        for: 10m
        labels:
          severity: warning
          component: sync
        annotations:
          summary: "Sync operation backlog detected"
          description: "{{ $value }} sync operations pending (threshold: 100)"
          runbook_url: "https://runbooks.modulo.io/sync-backlog"

    - name: modulo.infrastructure
      interval: 30s
      rules:
      # Service Availability
      - alert: ServiceDown
        expr: |
          up{job=~"modulo.*"} == 0
        for: 1m
        labels:
          severity: critical
          component: infrastructure
        annotations:
          summary: "Service is down"
          description: "{{ $labels.instance }} has been down for more than 1 minute"
          runbook_url: "https://runbooks.modulo.io/service-down"

      # Pod Restart Frequency
      - alert: HighPodRestartRate
        expr: |
          rate(kube_pod_container_status_restarts_total{namespace="modulo"}[15m]) > 0.1
        for: 5m
        labels:
          severity: warning
          component: kubernetes
        annotations:
          summary: "High pod restart rate"
          description: "Pod {{ $labels.pod }} is restarting frequently"
          runbook_url: "https://runbooks.modulo.io/pod-restarts"

      # Disk Space
      - alert: HighDiskUsage
        expr: |
          (
            1 - (
              node_filesystem_avail_bytes{mountpoint="/"} / 
              node_filesystem_size_bytes{mountpoint="/"}
            )
          ) * 100 > 85
        for: 5m
        labels:
          severity: warning
          component: infrastructure
        annotations:
          summary: "High disk usage"
          description: "Disk usage is {{ $value }}% (threshold: 85%)"
          runbook_url: "https://runbooks.modulo.io/disk-usage"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.2
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=7d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
          name: web
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: slo-rules
          mountPath: /etc/prometheus/rules
        - name: storage
          mountPath: /prometheus
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 2Gi
            cpu: 1000m
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: slo-rules
        configMap:
          name: prometheus-slo-rules
      - name: storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: observability
  labels:
    app: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app: prometheus
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: observability
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: observability
