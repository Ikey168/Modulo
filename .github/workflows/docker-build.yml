name: Multi-Architecture Docker Build

on:
  push:
    branches: [ "main", "feature/*", "**-*" ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      backend-digest: ${{ steps.build.outputs.digest }}
      backend-metadata: ${{ steps.meta.outputs.json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Install Syft for SBOM generation
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM for backend image
        if: github.event_name != 'pull_request'
        run: |
          syft ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} -o cyclonedx-json=backend-sbom.json

      - name: Upload SBOM as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: backend-sbom
          path: backend-sbom.json
          retention-days: 30

      - name: Generate build attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      frontend-digest: ${{ steps.build.outputs.digest }}
      frontend-metadata: ${{ steps.meta.outputs.json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            VITE_API_URL=${{ vars.VITE_API_URL || 'http://localhost:8080' }}

      - name: Install Syft for SBOM generation
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM for frontend image
        if: github.event_name != 'pull_request'
        run: |
          syft ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} -o cyclonedx-json=frontend-sbom.json

      - name: Upload SBOM as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-sbom
          path: frontend-sbom.json
          retention-days: 30

      - name: Generate build attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  security-scan:
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Set image name
        id: image
        run: |
          if [ "${{ matrix.component }}" = "backend" ]; then
            echo "name=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "digest=${{ needs.build-backend.outputs.backend-digest }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "digest=${{ needs.build-frontend.outputs.frontend-digest }}" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.name }}@${{ steps.image.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  generate-summary:
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Generate build summary
        run: |
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          # 🐳 Multi-Architecture Docker Build Summary
          
          ## 📦 Built Images
          
          ### Backend
          - **Image**: `${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}`
          - **Digest**: `${{ needs.build-backend.outputs.backend-digest }}`
          - **Platforms**: `linux/amd64`, `linux/arm64`
          
          ### Frontend  
          - **Image**: `${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}`
          - **Digest**: `${{ needs.build-frontend.outputs.frontend-digest }}`
          - **Platforms**: `linux/amd64`, `linux/arm64`
          
          ## 🔒 Security Features
          
          - ✅ **Non-root users** configured in all images
          - ✅ **SBOM generation** with Syft (CycloneDX format)
          - ✅ **Build attestations** with provenance tracking
          - ✅ **Vulnerability scanning** with Trivy
          - ✅ **Multi-architecture support** (AMD64/ARM64)
          
          ## 📋 Artifacts
          
          - Backend SBOM uploaded as build artifact
          - Frontend SBOM uploaded as build artifact
          - Build attestations published to registry
          - Security scan results uploaded to GitHub Security tab
          
          ---
          *Build completed at $(date -u +"%Y-%m-%dT%H:%M:%SZ")*
          EOF

      - name: Create digest file
        run: |
          cat << EOF > docker-digests.txt
          # Multi-Architecture Docker Build Digests
          # Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          # Commit: ${{ github.sha }}
          # Branch: ${{ github.ref_name }}
          
          ## Backend Image
          Image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          Digest: ${{ needs.build-backend.outputs.backend-digest }}
          Platforms: linux/amd64,linux/arm64
          
          ## Frontend Image  
          Image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          Digest: ${{ needs.build-frontend.outputs.frontend-digest }}
          Platforms: linux/amd64,linux/arm64
          
          ## Security Features
          - Non-root users: ✅
          - SBOM generation: ✅  
          - Build attestations: ✅
          - Vulnerability scanning: ✅
          EOF

      - name: Upload digest file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-digests
          path: docker-digests.txt
          retention-days: 90
