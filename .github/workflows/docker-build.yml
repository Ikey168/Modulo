name: Multi-Architecture Docker Build

on:
  push:
    branches: [ "main", "feature/*", "**-*" ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: ghcr.io

jobs:
  test-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test build ${{ matrix.component }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          platforms: linux/amd64
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push:
    needs: test-build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for keyless signing
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=sha,format=short,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.0'

      - name: Sign container images with Cosign (keyless)
        run: |
          # Get the digest from the build output
          digest="${{ steps.build.outputs.digest }}"
          
          # Sign all tags with keyless signing
          for tag in ${{ steps.meta.outputs.tags }}; do
            echo "Signing image: ${tag}@${digest}"
            cosign sign --yes "${tag}@${digest}"
          done
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Install Syft for SBOM generation
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: |
          main_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
          digest="${{ steps.build.outputs.digest }}"
          syft "${main_tag}@${digest}" -o cyclonedx-json=${{ matrix.component }}-sbom.json

      - name: Sign SBOM with Cosign
        run: |
          main_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
          digest="${{ steps.build.outputs.digest }}"
          
          # Attach SBOM to image
          cosign attach sbom --sbom ${{ matrix.component }}-sbom.json "${main_tag}@${digest}"
          
          # Sign the SBOM
          cosign sign --yes "${main_tag}@${digest}"
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Verify signed images
        run: |
          for tag in ${{ steps.meta.outputs.tags }}; do
            digest="${{ steps.build.outputs.digest }}"
            echo "Verifying signature for: ${tag}@${digest}"
            cosign verify "${tag}@${digest}" --certificate-identity-regexp=".*" --certificate-oidc-issuer-regexp=".*"
          done
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-sbom
          path: ${{ matrix.component }}-sbom.json
          retention-days: 30

  generate-summary:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Generate build summary
        run: |
          echo "# 🐳 Multi-Architecture Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Multi-arch builds completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Images signed with Cosign (keyless)**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **SBOM generation and attachment completed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Image signature verification passed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Images pushed to registry**" >> $GITHUB_STEP_SUMMARY
