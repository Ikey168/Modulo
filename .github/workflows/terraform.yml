name: 'Terraform Infrastructure'

on:
  push:
    branches: [ main, develop, "*-*" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

permissions:
  contents: read
  pull-requests: write
  id-token: write  # For OIDC authentication

env:
  TF_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive terraform/
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      id: validate
      run: |
        cd terraform
        terraform validate 2>&1 | tee validate_output.txt
        echo "stdout<<EOF" >> $GITHUB_OUTPUT
        cat validate_output.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        VALIDATION_OUTPUT: ${{ steps.validate.outputs.stdout }}
      with:
        script: |
          const validationOutput = process.env.VALIDATION_OUTPUT || 'No output captured';
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          
          <details><summary>Validation Output</summary>
          
          \`\`\`
          ${validationOutput}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-plan-dev:
    name: 'Terraform Plan (Dev)'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan -var-file="environments/dev/terraform.tfvars" -out=dev.tfplan
      env:
        TF_VAR_administrator_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_alert_email_recipients: ${{ secrets.DEV_ALERT_RECIPIENTS }}

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-dev
        path: terraform/dev.tfplan
        retention-days: 30

  terraform-apply-dev:
    name: 'Terraform Apply (Dev)'
    runs-on: ubuntu-latest
    needs: terraform-plan-dev
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-dev
        path: terraform/

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve dev.tfplan
      env:
        TF_VAR_administrator_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_alert_email_recipients: ${{ secrets.DEV_ALERT_RECIPIENTS }}

    - name: Terraform Output
      id: output
      run: |
        cd terraform
        terraform output -json > outputs.json
        echo "outputs=$(cat outputs.json)" >> $GITHUB_OUTPUT

    - name: Upload Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-dev
        path: terraform/outputs.json
        retention-days: 30

  terraform-plan-prod:
    name: 'Terraform Plan (Prod)'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan -var-file="environments/prod/terraform.tfvars" -out=prod.tfplan
      env:
        TF_VAR_administrator_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_alert_email_recipients: ${{ secrets.PROD_ALERT_RECIPIENTS }}

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-prod
        path: terraform/prod.tfplan
        retention-days: 30

  terraform-apply-prod:
    name: 'Terraform Apply (Prod)'
    runs-on: ubuntu-latest
    needs: terraform-plan-prod
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-prod
        path: terraform/

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve prod.tfplan
      env:
        TF_VAR_administrator_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_alert_email_recipients: ${{ secrets.PROD_ALERT_RECIPIENTS }}

    - name: Terraform Output
      id: output
      run: |
        cd terraform
        terraform output -json > outputs.json
        echo "outputs=$(cat outputs.json)" >> $GITHUB_OUTPUT

    - name: Upload Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-prod
        path: terraform/outputs.json
        retention-days: 90

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Destroy
      run: |
        cd terraform
        terraform destroy -auto-approve -var-file="environments/${{ github.event.inputs.environment }}/terraform.tfvars"
      env:
        TF_VAR_administrator_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_alert_email_recipients: ${{ github.event.inputs.environment == 'prod' && secrets.PROD_ALERT_RECIPIENTS || secrets.DEV_ALERT_RECIPIENTS }}

  notification:
    name: 'Notification'
    runs-on: ubuntu-latest
    needs: [terraform-apply-dev, terraform-apply-prod]
    if: always() && (needs.terraform-apply-dev.result != 'skipped' || needs.terraform-apply-prod.result != 'skipped')
    
    steps:
    - name: Determine Environment
      id: env
      run: |
        if [[ "${{ needs.terraform-apply-prod.result }}" != "skipped" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "status=${{ needs.terraform-apply-prod.result }}" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "status=${{ needs.terraform-apply-dev.result }}" >> $GITHUB_OUTPUT
        fi

    - name: Notify Success
      if: steps.env.outputs.status == 'success'
      run: |
        echo "‚úÖ Terraform deployment successful for ${{ steps.env.outputs.environment }} environment"
        # Add webhook notification here if needed

    - name: Notify Failure
      if: steps.env.outputs.status == 'failure'
      run: |
        echo "‚ùå Terraform deployment failed for ${{ steps.env.outputs.environment }} environment"
        # Add webhook notification here if needed
