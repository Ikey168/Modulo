name: Secret Scanning

on:
  push:
    branches: [ "main", "develop", "feature/*", "*-*" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Run daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  gitleaks:
    name: Run Gitleaks Secret Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for comprehensive scanning
          fetch-depth: 0

      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Upload Gitleaks SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: gitleaks

      - name: Comment on PR if secrets found
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const sarif = JSON.parse(fs.readFileSync('results.sarif', 'utf8'));
              const runs = sarif.runs || [];
              let secretCount = 0;
              
              runs.forEach(run => {
                secretCount += (run.results || []).length;
              });
              
              if (secretCount > 0) {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `🚨 **Secret Scanning Alert** 🚨
                  
Gitleaks detected **${secretCount}** potential secret(s) in this PR.

**Action Required:**
- Review the Security tab for details
- Remove any exposed secrets
- Rotate any compromised credentials
- Update your code to use environment variables or secure secret management

**Resources:**
- [GitHub Secret Scanning](https://docs.github.com/en/code-security/secret-scanning)
- [Best Practices for Managing Secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)

This PR cannot be merged until all secrets are resolved.`
                });
              }
            } catch (error) {
              console.log('No SARIF file found or error reading it:', error.message);
            }

  secret-scanning-summary:
    name: Secret Scanning Summary
    runs-on: ubuntu-latest
    needs: [gitleaks]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "# 🔍 Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.gitleaks.result }}" == "success" ]; then
            echo "✅ **No secrets detected!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The repository scan completed successfully with no exposed secrets found." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Secrets detected!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Potential secrets were found in the repository. Please:" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the Security tab for detailed findings" >> $GITHUB_STEP_SUMMARY
            echo "2. Remove any exposed secrets from your code" >> $GITHUB_STEP_SUMMARY
            echo "3. Rotate any compromised credentials" >> $GITHUB_STEP_SUMMARY
            echo "4. Use environment variables or GitHub Secrets for sensitive data" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🛡️ Security Best Practices" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`secrets\` context in GitHub Actions" >> $GITHUB_STEP_SUMMARY
          echo "- Store sensitive data in environment variables" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`.env\` files (and add them to \`.gitignore\`)" >> $GITHUB_STEP_SUMMARY
          echo "- Implement proper secret rotation policies" >> $GITHUB_STEP_SUMMARY
          echo "- Use secret management tools (AWS Secrets Manager, HashiCorp Vault, etc.)" >> $GITHUB_STEP_SUMMARY
