name: Security Penetration Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_target:
        description: 'Target environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - development
      parallel_execution:
        description: 'Run tests in parallel'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  security-penetration-tests:
    name: Security Penetration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      matrix:
        test-suite:
          - owasp-top-10
          - injection-vulnerabilities
          - authentication-security
          - network-security
          - api-security
          - dynamic-security
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'security-penetration-testing/package-lock.json'

      - name: Install dependencies
        working-directory: ./security-penetration-testing
        run: |
          npm ci
          # Install additional security tools
          npm install -g @owasp/zap-api-nodejs
          
      - name: Setup test environment
        run: |
          # Configure test targets based on input or branch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TEST_TARGET=${{ github.event.inputs.test_target }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "TEST_TARGET=production" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "TEST_TARGET=staging" >> $GITHUB_ENV
          else
            echo "TEST_TARGET=development" >> $GITHUB_ENV
          fi
          
          # Set target URLs based on environment
          case $TEST_TARGET in
            "production")
              echo "TEST_TARGET_URL=${{ secrets.PROD_APP_URL }}" >> $GITHUB_ENV
              echo "API_TARGET_URL=${{ secrets.PROD_API_URL }}" >> $GITHUB_ENV
              echo "API_KEY=${{ secrets.PROD_API_KEY }}" >> $GITHUB_ENV
              ;;
            "staging")
              echo "TEST_TARGET_URL=${{ secrets.STAGING_APP_URL }}" >> $GITHUB_ENV
              echo "API_TARGET_URL=${{ secrets.STAGING_API_URL }}" >> $GITHUB_ENV
              echo "API_KEY=${{ secrets.STAGING_API_KEY }}" >> $GITHUB_ENV
              ;;
            *)
              echo "TEST_TARGET_URL=http://localhost:3000" >> $GITHUB_ENV
              echo "API_TARGET_URL=http://localhost:8080" >> $GITHUB_ENV
              echo "API_KEY=test-api-key" >> $GITHUB_ENV
              ;;
          esac

      - name: Start test application (development only)
        if: env.TEST_TARGET == 'development'
        run: |
          # Start the application in the background for testing
          docker-compose -f docker-compose.dev.yml up -d
          # Wait for services to be ready
          timeout 300 bash -c 'until curl -s http://localhost:3000/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -s http://localhost:8080/api/health; do sleep 5; done'

      - name: Run OWASP Top 10 Tests
        if: matrix.test-suite == 'owasp-top-10'
        working-directory: ./security-penetration-testing
        run: |
          npm run test:owasp
          
      - name: Run Injection Vulnerability Tests
        if: matrix.test-suite == 'injection-vulnerabilities'
        working-directory: ./security-penetration-testing
        run: |
          npm run test:injection
          
      - name: Run Authentication Security Tests
        if: matrix.test-suite == 'authentication-security'
        working-directory: ./security-penetration-testing
        run: |
          npm run test:auth
          
      - name: Run Network Security Tests
        if: matrix.test-suite == 'network-security'
        working-directory: ./security-penetration-testing
        run: |
          npm run test:network
          
      - name: Run API Security Tests
        if: matrix.test-suite == 'api-security'
        working-directory: ./security-penetration-testing
        run: |
          npm run test:api
          
      - name: Run Dynamic Security Tests
        if: matrix.test-suite == 'dynamic-security'
        working-directory: ./security-penetration-testing
        run: |
          npm run test:dynamic

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results-${{ matrix.test-suite }}-${{ env.TEST_TARGET }}
          path: |
            security-penetration-testing/results/
            security-penetration-testing/logs/
          retention-days: 30

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ matrix.test-suite }}-${{ env.TEST_TARGET }}
          path: |
            security-penetration-testing/results/*.json
            security-penetration-testing/results/*.html
          retention-days: 90

      - name: Comment on PR with security results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const resultsDir = './security-penetration-testing/results';
              const reportFiles = fs.readdirSync(resultsDir).filter(file => file.endsWith('.json'));
              
              let comment = `## 🛡️ Security Penetration Testing Results - ${{ matrix.test-suite }}\n\n`;
              comment += `**Target Environment:** ${{ env.TEST_TARGET }}\n`;
              comment += `**Test Suite:** ${{ matrix.test-suite }}\n\n`;
              
              for (const reportFile of reportFiles) {
                const reportPath = path.join(resultsDir, reportFile);
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                
                comment += `### ${report.testSuite || reportFile}\n`;
                comment += `- **Overall Score:** ${report.overallScore}%\n`;
                comment += `- **Status:** ${report.status}\n`;
                
                if (report.vulnerabilities && report.vulnerabilities.length > 0) {
                  comment += `- **Vulnerabilities Found:** ${report.vulnerabilities.length}\n`;
                  
                  const criticalVulns = report.vulnerabilities.filter(v => v.severity === 'Critical');
                  const highVulns = report.vulnerabilities.filter(v => v.severity === 'High');
                  
                  if (criticalVulns.length > 0) {
                    comment += `  - 🔴 Critical: ${criticalVulns.length}\n`;
                  }
                  if (highVulns.length > 0) {
                    comment += `  - 🟠 High: ${highVulns.length}\n`;
                  }
                } else {
                  comment += `- **Vulnerabilities Found:** None ✅\n`;
                }
                comment += '\n';
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Failed to post PR comment:', error);
            }

      - name: Cleanup test environment (development only)
        if: env.TEST_TARGET == 'development' && always()
        run: |
          docker-compose -f docker-compose.dev.yml down

  comprehensive-security-report:
    name: Generate Comprehensive Security Report
    runs-on: ubuntu-latest
    needs: security-penetration-tests
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'security-penetration-testing/package-lock.json'

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ./security-results
          pattern: security-test-results-*

      - name: Download all security reports
        uses: actions/download-artifact@v4
        with:
          path: ./security-reports
          pattern: security-reports-*

      - name: Install dependencies
        working-directory: ./security-penetration-testing
        run: npm ci

      - name: Generate comprehensive security report
        working-directory: ./security-penetration-testing
        run: |
          node utils/generate-comprehensive-report.js \
            --input-dir ../security-results \
            --output-dir ./comprehensive-results \
            --target ${{ env.TEST_TARGET || 'development' }}

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report-${{ env.TEST_TARGET || 'development' }}
          path: |
            security-penetration-testing/comprehensive-results/
          retention-days: 90

      - name: Notify security team on critical vulnerabilities
        if: env.TEST_TARGET == 'production'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const reportPath = './security-penetration-testing/comprehensive-results/comprehensive-security-report.json';
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const criticalVulns = report.vulnerabilities?.filter(v => v.severity === 'Critical') || [];
              
              if (criticalVulns.length > 0) {
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🚨 CRITICAL: Security vulnerabilities found in production`,
                  body: `## Critical Security Vulnerabilities Detected\n\n` +
                        `**Environment:** Production\n` +
                        `**Critical Vulnerabilities:** ${criticalVulns.length}\n\n` +
                        `### Vulnerabilities:\n` +
                        criticalVulns.map(v => `- **${v.name}** (${v.severity}): ${v.details}`).join('\n') +
                        `\n\n**Action Required:** Immediate investigation and remediation required.\n` +
                        `**Full Report:** Available in workflow artifacts.`,
                  labels: ['security', 'critical', 'production'],
                  assignees: ['${{ secrets.SECURITY_TEAM_LEAD }}']
                });
                
                console.log(`Created critical security issue: ${issue.data.html_url}`);
              }
            } catch (error) {
              console.error('Failed to create security issue:', error);
            }

      - name: Update security dashboard
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // This would typically update an external security dashboard
            // or send notifications to security monitoring systems
            console.log('Security testing completed for ${{ env.TEST_TARGET || "development" }}');

  security-quality-gate:
    name: Security Quality Gate
    runs-on: ubuntu-latest
    needs: [security-penetration-tests, comprehensive-security-report]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download comprehensive security report
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-security-report-${{ env.TEST_TARGET || 'development' }}
          path: ./security-report

      - name: Evaluate security quality gate
        run: |
          REPORT_FILE="./security-report/comprehensive-security-report.json"
          
          if [ -f "$REPORT_FILE" ]; then
            OVERALL_SCORE=$(jq -r '.overallScore' "$REPORT_FILE")
            CRITICAL_VULNS=$(jq -r '.vulnerabilities | map(select(.severity == "Critical")) | length' "$REPORT_FILE")
            HIGH_VULNS=$(jq -r '.vulnerabilities | map(select(.severity == "High")) | length' "$REPORT_FILE")
            
            echo "Overall Security Score: $OVERALL_SCORE%"
            echo "Critical Vulnerabilities: $CRITICAL_VULNS"
            echo "High Vulnerabilities: $HIGH_VULNS"
            
            # Security quality gate criteria
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "❌ Security Quality Gate FAILED: Critical vulnerabilities found"
              exit 1
            elif [ "$HIGH_VULNS" -gt 5 ]; then
              echo "❌ Security Quality Gate FAILED: Too many high severity vulnerabilities ($HIGH_VULNS > 5)"
              exit 1
            elif [ "$OVERALL_SCORE" -lt 80 ]; then
              echo "❌ Security Quality Gate FAILED: Overall security score too low ($OVERALL_SCORE% < 80%)"
              exit 1
            else
              echo "✅ Security Quality Gate PASSED"
            fi
          else
            echo "❌ Security Quality Gate FAILED: No security report found"
            exit 1
          fi
