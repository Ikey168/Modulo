# Kubernetes-specific Spring Boot configuration
server.port=8080

# Database configuration
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false

# Health and monitoring
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Logging
logging.level.root=INFO
logging.level.com.modulo=DEBUG

# Security
spring.security.oauth2.client.registration.github.redirect-uri=https://modulo-api.example.com/login/oauth2/code/github

# OpenTelemetry Kubernetes Configuration
otel.service.name=modulo-backend
otel.service.version=${OTEL_SERVICE_VERSION:1.0.0}
otel.resource.attributes=service.name=modulo-backend,service.version=${OTEL_SERVICE_VERSION:1.0.0},deployment.environment=${OTEL_ENVIRONMENT:production}

# OpenTelemetry Exporter Configuration for Kubernetes
otel.traces.exporter=${OTEL_TRACES_EXPORTER:otlp}
otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://otel-collector:4317}
otel.exporter.otlp.protocol=${OTEL_EXPORTER_OTLP_PROTOCOL:grpc}
otel.exporter.otlp.headers=${OTEL_EXPORTER_OTLP_HEADERS:}

# Alternative Jaeger configuration
otel.exporter.jaeger.endpoint=${OTEL_EXPORTER_JAEGER_ENDPOINT:http://jaeger-collector:14250}

# Sampling configuration for production
otel.traces.sampler=${OTEL_TRACES_SAMPLER:traceidratio}
otel.traces.sampler.arg=${OTEL_TRACES_SAMPLER_ARG:0.1}

# Kubernetes-specific instrumentation
otel.instrumentation.spring-webmvc.enabled=true
otel.instrumentation.jdbc.enabled=true
otel.instrumentation.hibernate.enabled=true
otel.instrumentation.micrometer.enabled=true
otel.instrumentation.logback-mdc.enabled=true

# Kubernetes resource attributes
otel.resource.attributes.k8s.namespace.name=${K8S_NAMESPACE:default}
otel.resource.attributes.k8s.pod.name=${K8S_POD_NAME:unknown}
otel.resource.attributes.k8s.deployment.name=${K8S_DEPLOYMENT_NAME:modulo-backend}
otel.resource.attributes.k8s.container.name=${K8S_CONTAINER_NAME:modulo-backend}

# Production metrics
management.metrics.export.prometheus.enabled=true
management.metrics.tags.pod=${K8S_POD_NAME:unknown}
management.metrics.tags.namespace=${K8S_NAMESPACE:default}

# Modulo Configuration - Kubernetes Profile
# Security Configuration
modulo.security.jwt-secret=${MODULO_JWT_SECRET:k8s-jwt-secret-key-change-me}
modulo.security.api-key=${MODULO_API_KEY:k8s-api-key-change-me}
modulo.security.encryption-key=${MODULO_ENCRYPTION_KEY:k8s-encryption-key-32-chars-long}

# Feature Flags - Kubernetes
modulo.features.blockchain.enabled=${MODULO_BLOCKCHAIN_ENABLED:true}
modulo.features.websockets.enabled=${MODULO_WEBSOCKETS_ENABLED:true}
modulo.features.grpc.enabled=${MODULO_GRPC_ENABLED:true}
modulo.features.notification.enabled=${MODULO_NOTIFICATION_ENABLED:true}
modulo.features.offline.enabled=${MODULO_OFFLINE_ENABLED:true}
modulo.features.sync.enabled=${MODULO_SYNC_ENABLED:true}

# Performance Configuration - Kubernetes
modulo.performance.file.max-size=${MODULO_MAX_FILE_SIZE:104857600}
modulo.performance.timeout.api=${MODULO_API_TIMEOUT:30000}
modulo.performance.timeout.database=${MODULO_DB_TIMEOUT:5000}
modulo.performance.cache.ttl=${MODULO_CACHE_TTL:7200}

# Integration Configuration - Kubernetes
modulo.integrations.blockchain.polygon.rpc-url=${POLYGON_RPC_URL:https://polygon-mainnet.g.alchemy.com/v2/your-api-key}
modulo.integrations.external-api.timeout=${EXTERNAL_API_TIMEOUT:30000}
