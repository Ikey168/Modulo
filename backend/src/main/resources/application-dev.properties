# Basic server configuration
server.port=8081

# Actuator Configuration
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoints.web.base-path=/actuator

# Minimal security configuration
spring.security.oauth2.client.registration.google.client-id=test
spring.security.oauth2.client.registration.google.client-secret=test
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google

# Logging
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.boot.actuate=DEBUG
logging.level.org.springframework.web=DEBUG

# OpenTelemetry Development Configuration
otel.service.name=modulo-backend-dev
otel.service.version=1.0.0-dev
otel.resource.attributes=service.name=modulo-backend-dev,service.version=1.0.0-dev,deployment.environment=development

# OpenTelemetry Exporter Configuration for Development
otel.traces.exporter=otlp
otel.exporter.otlp.endpoint=http://localhost:4317
otel.exporter.otlp.protocol=grpc

# Alternative: Use Jaeger directly in development
# otel.traces.exporter=jaeger
# otel.exporter.jaeger.endpoint=http://localhost:14250

# High sampling rate for development
otel.traces.sampler=traceidratio
otel.traces.sampler.arg=1.0

# Development-specific instrumentation
otel.instrumentation.spring-webmvc.enabled=true
otel.instrumentation.jdbc.enabled=true
otel.instrumentation.hibernate.enabled=true
otel.instrumentation.micrometer.enabled=true
otel.instrumentation.logback-mdc.enabled=true

# Development logging
logging.level.io.opentelemetry=DEBUG
logging.level.com.modulo=DEBUG

# Development metrics
management.metrics.export.prometheus.enabled=true